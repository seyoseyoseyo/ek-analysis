import tweepy
import csv
import datetime
import matplotlib.pyplot as plt
import sys

global twitter_name
twitter_name = 'name'

consumer_key = 'gu9qJw3GCUb407P0l1pEmUkIs'
consumer_secret = 'IAyuoqO2k9lElyM4ub7it1SMxJA8ZPyhdAobPYbpKTYAcWG8v1'
access_token = '890886464-ctWSta4dfVHOfGHWQYsTCsfguECTupId1vPMdVJh'
access_token_secret = 'HHH55BGBmrp3QbNeuFVuK0uJ8YIyojRyMlFeT6tKM4ON5'

ek_list = ["rig", "magnitude", "terror", "sundown", "nebula", "kaixin", "angler", "neutrino", "fiesta", "orange",
           "gongdad", "gondad", "flashpack", "zuponcic", "infinity", "blackhole", "dotkachef", "nuclear", "astrum",
           "gongda"]


def random():
    for tweet in tweepy.Cursor(api.search, q="exploit kit", count=100).items():
        print
        tweet.created_at, tweet.text.encode('utf-8')


def get_all_tweets(screen_name):
    # Twitter only allows access to a users most recent 3240 tweets with this method

    # authorize twitter, initialize tweepy
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    api = tweepy.API(auth)

    # initialize a list to hold all the tweepy Tweets
    global alltweets
    alltweets = []
    # make initial request for most recent tweets (200 is the maximum allowed count)
    tries = 5
    while tries > 0:
        try:
            new_tweets = api.user_timeline(screen_name=screen_name, count=40)
            break
        except:
            print("Retrying...")
            tries = tries-1

    # save most recent tweets
    alltweets.extend(new_tweets)

    # save the id of the oldest tweet less one
    oldest = alltweets[-1].id - 1

    # keep grabbing tweets until there are no tweets left to grab
    while len(new_tweets) > 0:
        print("getting tweets before %s" % (oldest))

        # all subsiquent requests use the max_id param to prevent duplicates
        new_tweets = api.user_timeline(screen_name=screen_name, count=40, max_id=oldest)

        # save most recent tweets
        alltweets.extend(new_tweets)

        # update the id of the oldest tweet less one
        oldest = alltweets[-1].id - 1

        print("...%s tweets downloaded so far" % (len(alltweets)))

    # transform the tweepy tweets into a 2D array that will populate the csv
    global outtweets
    outtweets = [[tweet.created_at, tweet.text.encode("utf-8")] for tweet in alltweets]

def matchesName(ek, body):
    return \
        (' ' + ek + ' ') in body or \
        (ek + 'ek') in body or \
        ('#' + ek) in body

def check(body):
    output = []
    length = len(ek_list)
    for i in range(0, length):
        ek = ek_list[i]

        if matchesName(ek, str(body).lower()):
            output.append(ek_list[i])
    return output


def print_frequency():
    for i in range(0, len(unique_ek)):
        print(unique_ek[i], " :", frequency_list[i])

def resort(list, order):
    result = []
    for e in order:
        if e in list:
            result.append(e)

    return result


# Aux function called by display to plot the graph
def plot(unique_ek):
    x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    my_xticks = ['11', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0']
    plt.xticks(x, my_xticks)
    unique_ek = resort(unique_ek, ek_list)
    for i in range(0, len(unique_ek)):
        plt.plot(x, frequency_list[i], label=unique_ek[i])
    plt.xlabel('Months before today')
    plt.ylabel('Number of mentions')
    plt.legend().draggable()
    plt.title("Frequency of Mention per Month by @" + twitter_name)
    plt.show()


def this_year(thatdate):
    today = datetime.date.today()
    if thatdate.year == today.year - 1:
        if thatdate.month > today.month:
            return True
        elif thatdate.month == today.month and thatdate.day >= today.day:
            return True
    elif thatdate.year == today.year:
        return True


def get_month(thatdate):
    today = datetime.date.today()
    if thatdate.year == today.year:
        month_diff = today.month - thatdate.month
        if thatdate.day > today.day:
            month_diff -= 1
    else:
        month_diff = 12 - (thatdate.month - today.month)
        if thatdate.day > today.day:
            month_diff -= 1
    return month_diff


if __name__ == '__main__':
    alltweets = []
    outtweets = []
    unique_ek = []  # ['neutrino', ...]
    frequency_list = []
    count = 0
    interesting_items = []

    twitter_name = sys.argv[1]
    get_all_tweets(twitter_name)
    length = len(outtweets)
    for i in range(0, length):
        occurance = check(outtweets[i][1])
        if occurance:
            count += 1
            if this_year(outtweets[i][0]):
                for ek in occurance:
                    if ek not in unique_ek:
                        unique_ek.append(ek)
                        frequency_list.append([0] * 12)
                    month = get_month(outtweets[i][0])
                    ek_num = unique_ek.index(ek)
                    print(month, outtweets[i][0], outtweets[i][1])
                    frequency_list[ek_num][11 - month] += 1
    #print(count)
    for i in range(0, len(interesting_items)):
        print
        interesting_items[i]
        print("------")
    print(outtweets[1][0].month)
    plot(unique_ek)
    print('Done.')